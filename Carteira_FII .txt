{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CARTEIRA DE FUNDOS IMOBILIÁRIOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "import yfinance as yf\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import matplotlib.pyplot as plt\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "from reportlab.lib import colors\n",
    "from reportlab.platypus import SimpleDocTemplate, Table, TableStyle\n",
    "from reportlab.lib.utils import ImageReader\n",
    "from matplotlib.colors import LinearSegmentedColormap\n",
    "import io\n",
    "from PyPDF2 import PdfMerger\n",
    "import pdfkit\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Carregar o arquivo Excel\n",
    "file_path = r'C:\\Users\\GuilhermeSCopetti\\Desktop\\Projetos Python + AI\\Projeto2(Dash_FII)\\Tabela_FII\\Carteira_FII(SA).xlsx'\n",
    "df = pd.read_excel(file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Peso</th>\n",
       "      <th>FII</th>\n",
       "      <th>Tipo de Fundo</th>\n",
       "      <th>Segmento</th>\n",
       "      <th>qtd</th>\n",
       "      <th>P.Entrada</th>\n",
       "      <th>Valor.Entrada</th>\n",
       "      <th>P.Atual</th>\n",
       "      <th>V.Atual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12.308988</td>\n",
       "      <td>BCFF11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>85.0</td>\n",
       "      <td>8.890000</td>\n",
       "      <td>755.65</td>\n",
       "      <td>8.260000</td>\n",
       "      <td>702.100019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.611157</td>\n",
       "      <td>HSML11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>93.060000</td>\n",
       "      <td>651.42</td>\n",
       "      <td>95.360001</td>\n",
       "      <td>667.520004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20.177195</td>\n",
       "      <td>RECR11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>88.477143</td>\n",
       "      <td>1238.68</td>\n",
       "      <td>84.989998</td>\n",
       "      <td>1189.859970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.599922</td>\n",
       "      <td>VISC11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>116.640000</td>\n",
       "      <td>466.56</td>\n",
       "      <td>112.949997</td>\n",
       "      <td>451.799988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.961390</td>\n",
       "      <td>RBRR11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>90.900000</td>\n",
       "      <td>181.80</td>\n",
       "      <td>90.959999</td>\n",
       "      <td>181.919998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9.925053</td>\n",
       "      <td>BRCO11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>121.860000</td>\n",
       "      <td>609.30</td>\n",
       "      <td>116.910004</td>\n",
       "      <td>584.550018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.451527</td>\n",
       "      <td>VGIP11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>91.490000</td>\n",
       "      <td>457.45</td>\n",
       "      <td>88.529999</td>\n",
       "      <td>442.649994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>13.713938</td>\n",
       "      <td>CVBI11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>84.190000</td>\n",
       "      <td>841.90</td>\n",
       "      <td>93.500000</td>\n",
       "      <td>935.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.908614</td>\n",
       "      <td>MALL11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>117.170000</td>\n",
       "      <td>117.17</td>\n",
       "      <td>108.269997</td>\n",
       "      <td>108.269997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1.676492</td>\n",
       "      <td>VILG11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>102.920000</td>\n",
       "      <td>102.92</td>\n",
       "      <td>88.959999</td>\n",
       "      <td>88.959999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>9.825363</td>\n",
       "      <td>KNCR11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>100.530000</td>\n",
       "      <td>603.18</td>\n",
       "      <td>104.160004</td>\n",
       "      <td>624.960022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1.840362</td>\n",
       "      <td>XPLG11.SA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>112.980000</td>\n",
       "      <td>112.98</td>\n",
       "      <td>103.599998</td>\n",
       "      <td>103.599998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>nan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6139.01</td>\n",
       "      <td>11.430000</td>\n",
       "      <td>6081.190008</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Peso        FII  Tipo de Fundo  Segmento   qtd   P.Entrada  \\\n",
       "0    12.308988  BCFF11.SA            NaN       NaN  85.0    8.890000   \n",
       "1    10.611157  HSML11.SA            NaN       NaN   7.0   93.060000   \n",
       "2    20.177195  RECR11.SA            NaN       NaN  14.0   88.477143   \n",
       "3     7.599922  VISC11.SA            NaN       NaN   4.0  116.640000   \n",
       "4     2.961390  RBRR11.SA            NaN       NaN   2.0   90.900000   \n",
       "5     9.925053  BRCO11.SA            NaN       NaN   5.0  121.860000   \n",
       "6     7.451527  VGIP11.SA            NaN       NaN   5.0   91.490000   \n",
       "7    13.713938  CVBI11.SA            NaN       NaN  10.0   84.190000   \n",
       "8     1.908614  MALL11.SA            NaN       NaN   1.0  117.170000   \n",
       "9     1.676492  VILG11.SA            NaN       NaN   1.0  102.920000   \n",
       "10    9.825363  KNCR11.SA            NaN       NaN   6.0  100.530000   \n",
       "11    1.840362  XPLG11.SA            NaN       NaN   1.0  112.980000   \n",
       "12  100.000000        nan            NaN       NaN   NaN         NaN   \n",
       "\n",
       "    Valor.Entrada     P.Atual      V.Atual  \n",
       "0          755.65    8.260000   702.100019  \n",
       "1          651.42   95.360001   667.520004  \n",
       "2         1238.68   84.989998  1189.859970  \n",
       "3          466.56  112.949997   451.799988  \n",
       "4          181.80   90.959999   181.919998  \n",
       "5          609.30  116.910004   584.550018  \n",
       "6          457.45   88.529999   442.649994  \n",
       "7          841.90   93.500000   935.000000  \n",
       "8          117.17  108.269997   108.269997  \n",
       "9          102.92   88.959999    88.959999  \n",
       "10         603.18  104.160004   624.960022  \n",
       "11         112.98  103.599998   103.599998  \n",
       "12        6139.01   11.430000  6081.190008  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['FII'] = df['FII'].astype(str)\n",
    "# Função para atualizar as cotações dos FII\n",
    "def atualizar_cotacoes(df):\n",
    "    tickers = df['FII'].tolist()\n",
    "    cotacoes = {}\n",
    "    \n",
    "    for ticker in tickers:\n",
    "        try:\n",
    "            cotacao = yf.Ticker(ticker).history(period=\"1d\")['Close'].iloc[0]\n",
    "            cotacoes[ticker] = cotacao\n",
    "        except (IndexError, KeyError, ValueError):\n",
    "            cotacoes[ticker] = None\n",
    "            \n",
    "    df['P.Atual'] = df['FII'].map(cotacoes)\n",
    "    return df\n",
    "\n",
    "# Atualizar o DataFrame com as cotações atuais\n",
    "df = atualizar_cotacoes(df)\n",
    "\n",
    "# Preprocessar o DataFrame (remover NaN se necessário)\n",
    "df_clean = df.dropna(subset=['FII', 'P.Atual'])\n",
    "\n",
    "# Aplicar a função à coluna 'P.Atual' e calcular 'V.Atual'\n",
    "\n",
    "df['V.Atual'] = df['qtd'] * df['P.Atual']\n",
    "\n",
    "# Total: V.Atual\n",
    "df.loc[12, 'V.Atual']=df['V.Atual'].sum()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Criar variaveis para receber o somatório do Valor.Entrada e V.Atual\n",
    "valor_Entrada=df.iloc[12, 6] \n",
    "valor_Atual=df.iloc[12, 8]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Buscando Informações dos FII com método Webscraping \n",
    "- SEGMENTO (Ex: Shoppings / Varejo); TIPO DE FUNDO(Ex:Fundo de Tijolo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Peso</th>\n",
       "      <th>FII</th>\n",
       "      <th>Tipo de Fundo</th>\n",
       "      <th>Segmento</th>\n",
       "      <th>qtd</th>\n",
       "      <th>P.Entrada</th>\n",
       "      <th>Valor.Entrada</th>\n",
       "      <th>P.Atual</th>\n",
       "      <th>V.Atual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12.308988</td>\n",
       "      <td>BCFF11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>85.0</td>\n",
       "      <td>8.890000</td>\n",
       "      <td>755.65</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.611157</td>\n",
       "      <td>HSML11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>93.060000</td>\n",
       "      <td>651.42</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20.177195</td>\n",
       "      <td>RECR11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>88.477143</td>\n",
       "      <td>1238.68</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.599922</td>\n",
       "      <td>VISC11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>116.640000</td>\n",
       "      <td>466.56</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.961390</td>\n",
       "      <td>RBRR11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>90.900000</td>\n",
       "      <td>181.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9.925053</td>\n",
       "      <td>BRCO11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>121.860000</td>\n",
       "      <td>609.30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.451527</td>\n",
       "      <td>VGIP11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>91.490000</td>\n",
       "      <td>457.45</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>13.713938</td>\n",
       "      <td>CVBI11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>84.190000</td>\n",
       "      <td>841.90</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.908614</td>\n",
       "      <td>MALL11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>117.170000</td>\n",
       "      <td>117.17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1.676492</td>\n",
       "      <td>VILG11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>102.920000</td>\n",
       "      <td>102.92</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>9.825363</td>\n",
       "      <td>KNCR11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.0</td>\n",
       "      <td>100.530000</td>\n",
       "      <td>603.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1.840362</td>\n",
       "      <td>XPLG11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>112.980000</td>\n",
       "      <td>112.98</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6139.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Peso     FII  Tipo de Fundo  Segmento   qtd   P.Entrada  \\\n",
       "0    12.308988  BCFF11            NaN       NaN  85.0    8.890000   \n",
       "1    10.611157  HSML11            NaN       NaN   7.0   93.060000   \n",
       "2    20.177195  RECR11            NaN       NaN  14.0   88.477143   \n",
       "3     7.599922  VISC11            NaN       NaN   4.0  116.640000   \n",
       "4     2.961390  RBRR11            NaN       NaN   2.0   90.900000   \n",
       "5     9.925053  BRCO11            NaN       NaN   5.0  121.860000   \n",
       "6     7.451527  VGIP11            NaN       NaN   5.0   91.490000   \n",
       "7    13.713938  CVBI11            NaN       NaN  10.0   84.190000   \n",
       "8     1.908614  MALL11            NaN       NaN   1.0  117.170000   \n",
       "9     1.676492  VILG11            NaN       NaN   1.0  102.920000   \n",
       "10    9.825363  KNCR11            NaN       NaN   6.0  100.530000   \n",
       "11    1.840362  XPLG11            NaN       NaN   1.0  112.980000   \n",
       "12  100.000000     NaN            NaN       NaN   NaN         NaN   \n",
       "\n",
       "    Valor.Entrada  P.Atual  V.Atual  \n",
       "0          755.65      0.0        0  \n",
       "1          651.42      0.0        0  \n",
       "2         1238.68      0.0        0  \n",
       "3          466.56      0.0        0  \n",
       "4          181.80      0.0        0  \n",
       "5          609.30      0.0        0  \n",
       "6          457.45      0.0        0  \n",
       "7          841.90      0.0        0  \n",
       "8          117.17      0.0        0  \n",
       "9          102.92      0.0        0  \n",
       "10         603.18      0.0        0  \n",
       "11         112.98      0.0        0  \n",
       "12        6139.01      NaN        0  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Carregar o arquivo Excel\n",
    "file_path = r'C:\\Users\\GuilhermeSCopetti\\Desktop\\Projetos Python + AI\\Projeto2(Dash_FII)\\Tabela_FII\\Carteira_FII.xlsx'\n",
    "df_SA = pd.read_excel(file_path)\n",
    "df_SA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_SA['FII']\n",
    "lista_fii = df_SA['FII'].tolist()\n",
    "\n",
    "def scraping_uf(uf: str):\n",
    "    uf_url = f'https://investidor10.com.br/fiis/{uf}/'\n",
    "    browsers = {'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36\"}\n",
    "    page = requests.get(uf_url, headers=browsers)\n",
    "    \n",
    "    soup = BeautifulSoup(page.content, 'html.parser')\n",
    "    table = soup.select_one('#table-indicators')\n",
    "    \n",
    "    uf_dict = {}\n",
    "    if table:\n",
    "        cells = table.select('div.cell')\n",
    "        for cell in cells:\n",
    "            name = cell.select_one('.name').text.strip()\n",
    "            value = cell.select_one('.value span').text.strip()\n",
    "            uf_dict[name] = value\n",
    "\n",
    "    return uf_dict\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Verificar se a coluna 'FII' está presente no DataFrame\n",
    "if 'FII' not in df.columns:\n",
    "    raise ValueError(\"A coluna 'FII' não está presente no DataFrame\")\n",
    "\n",
    "# Criação de uma lista para armazenar os dados dos FIIs\n",
    "fii_data_list = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loop para fazer scraping de cada FII e adicionar à lista\n",
    "for fii_ticker in df_SA['FII']:\n",
    "    fii_info = scraping_uf(fii_ticker)\n",
    "    fii_info['FII'] = fii_ticker\n",
    "    fii_data_list.append(fii_info)\n",
    "\n",
    "# Converter a lista de dicionários em um DataFrame\n",
    "fii_data = pd.DataFrame(fii_data_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Incluir fii_data['TIPO DE FUNDO'] e fii_data['SEGMENTO'] no dataframe(Tabela Cripto)\n",
    "df['Tipo de Fundo'] = fii_data['TIPO DE FUNDO']\n",
    "df['Segmento'] = fii_data['SEGMENTO']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Retirar .SA e incluir no dataframe(Carteira_FIIs)\n",
    "lista_fii = df['FII'].tolist()\n",
    "lista_sem_SA = [item.replace('.SA', '') for item in lista_fii]\n",
    "df['FII']=lista_sem_SA "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FII</th>\n",
       "      <th>Tipo de Fundo</th>\n",
       "      <th>Segmento</th>\n",
       "      <th>qtd</th>\n",
       "      <th>P.Entrada</th>\n",
       "      <th>Valor.Entrada</th>\n",
       "      <th>P.Atual</th>\n",
       "      <th>V.Atual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BCFF11</td>\n",
       "      <td>Fundo de fundos</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>85.0</td>\n",
       "      <td>8.89</td>\n",
       "      <td>755.65</td>\n",
       "      <td>8.26</td>\n",
       "      <td>702.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HSML11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Shoppings / Varejo</td>\n",
       "      <td>7.0</td>\n",
       "      <td>93.06</td>\n",
       "      <td>651.42</td>\n",
       "      <td>95.36</td>\n",
       "      <td>667.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RECR11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>14.0</td>\n",
       "      <td>88.48</td>\n",
       "      <td>1238.68</td>\n",
       "      <td>84.99</td>\n",
       "      <td>1189.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VISC11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Shoppings / Varejo</td>\n",
       "      <td>4.0</td>\n",
       "      <td>116.64</td>\n",
       "      <td>466.56</td>\n",
       "      <td>112.95</td>\n",
       "      <td>451.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RBRR11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>2.0</td>\n",
       "      <td>90.90</td>\n",
       "      <td>181.80</td>\n",
       "      <td>90.96</td>\n",
       "      <td>181.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>BRCO11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Logístico / Indústria / Galpões</td>\n",
       "      <td>5.0</td>\n",
       "      <td>121.86</td>\n",
       "      <td>609.30</td>\n",
       "      <td>116.91</td>\n",
       "      <td>584.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>VGIP11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>5.0</td>\n",
       "      <td>91.49</td>\n",
       "      <td>457.45</td>\n",
       "      <td>88.53</td>\n",
       "      <td>442.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CVBI11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>10.0</td>\n",
       "      <td>84.19</td>\n",
       "      <td>841.90</td>\n",
       "      <td>93.50</td>\n",
       "      <td>935.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>MALL11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Shoppings / Varejo</td>\n",
       "      <td>1.0</td>\n",
       "      <td>117.17</td>\n",
       "      <td>117.17</td>\n",
       "      <td>108.27</td>\n",
       "      <td>108.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>VILG11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Logístico / Indústria / Galpões</td>\n",
       "      <td>1.0</td>\n",
       "      <td>102.92</td>\n",
       "      <td>102.92</td>\n",
       "      <td>88.96</td>\n",
       "      <td>88.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>KNCR11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>6.0</td>\n",
       "      <td>100.53</td>\n",
       "      <td>603.18</td>\n",
       "      <td>104.16</td>\n",
       "      <td>624.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>XPLG11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Logístico / Indústria / Galpões</td>\n",
       "      <td>1.0</td>\n",
       "      <td>112.98</td>\n",
       "      <td>112.98</td>\n",
       "      <td>103.60</td>\n",
       "      <td>103.60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       FII    Tipo de Fundo                         Segmento   qtd  P.Entrada  \\\n",
       "0   BCFF11  Fundo de fundos    Títulos e Valores Mobiliários  85.0       8.89   \n",
       "1   HSML11  Fundo de Tijolo               Shoppings / Varejo   7.0      93.06   \n",
       "2   RECR11   Fundo de papel    Títulos e Valores Mobiliários  14.0      88.48   \n",
       "3   VISC11  Fundo de Tijolo               Shoppings / Varejo   4.0     116.64   \n",
       "4   RBRR11   Fundo de papel    Títulos e Valores Mobiliários   2.0      90.90   \n",
       "5   BRCO11  Fundo de Tijolo  Logístico / Indústria / Galpões   5.0     121.86   \n",
       "6   VGIP11   Fundo de papel    Títulos e Valores Mobiliários   5.0      91.49   \n",
       "7   CVBI11   Fundo de papel    Títulos e Valores Mobiliários  10.0      84.19   \n",
       "8   MALL11  Fundo de Tijolo               Shoppings / Varejo   1.0     117.17   \n",
       "9   VILG11  Fundo de Tijolo  Logístico / Indústria / Galpões   1.0     102.92   \n",
       "10  KNCR11   Fundo de papel    Títulos e Valores Mobiliários   6.0     100.53   \n",
       "11  XPLG11  Fundo de Tijolo  Logístico / Indústria / Galpões   1.0     112.98   \n",
       "\n",
       "    Valor.Entrada  P.Atual  V.Atual  \n",
       "0          755.65     8.26   702.10  \n",
       "1          651.42    95.36   667.52  \n",
       "2         1238.68    84.99  1189.86  \n",
       "3          466.56   112.95   451.80  \n",
       "4          181.80    90.96   181.92  \n",
       "5          609.30   116.91   584.55  \n",
       "6          457.45    88.53   442.65  \n",
       "7          841.90    93.50   935.00  \n",
       "8          117.17   108.27   108.27  \n",
       "9          102.92    88.96    88.96  \n",
       "10         603.18   104.16   624.96  \n",
       "11         112.98   103.60   103.60  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Formatando a tabela para retornar 2 casas decimais\n",
    "df['Peso'] = df['Peso'].round(2)\n",
    "df['qtd'] = df['qtd'].round(2)\n",
    "df['P.Entrada'] = df['P.Entrada'].round(2)\n",
    "df['Valor.Entrada'] = df['Valor.Entrada'].round(2)\n",
    "df['P.Atual'] = df['P.Atual'].round(2)\n",
    "df['V.Atual'] = df['V.Atual'].round(2)\n",
    "\n",
    "df_clean = df.dropna(subset=['FII', 'P.Atual'])\n",
    "\n",
    "labels = df_clean['FII']\n",
    "values = df_clean['P.Atual']\n",
    "\n",
    "del df['Peso']\n",
    "#del df['Segmento']\n",
    "df = df.iloc[:-1]\n",
    "\n",
    "fii_tipo_de_fundo=df\n",
    "fii_tipo_de_fundo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Criar Gráfico dos pesos Valor Entrada e Valor Atual"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Data processing\n",
    "fii_tipo_de_fundo_clean = fii_tipo_de_fundo.dropna(subset=['FII', 'Valor.Entrada'])\n",
    "labels = fii_tipo_de_fundo_clean['FII']\n",
    "sizes = fii_tipo_de_fundo_clean['Valor.Entrada']\n",
    "# Data processing for the second pie chart\n",
    "fii_tipo_de_fundo_clean_v_atual = fii_tipo_de_fundo.dropna(subset=['FII', 'V.Atual'])\n",
    "labels_v_atual = fii_tipo_de_fundo_clean_v_atual['FII']\n",
    "sizes_v_atual = fii_tipo_de_fundo_clean_v_atual['V.Atual']\n",
    "\n",
    "\n",
    "# Defina uma paleta de cores em escala de cinza\n",
    "gray_cmap = LinearSegmentedColormap.from_list('gray', ['#000000', '#FFFFFF'])\n",
    "\n",
    "# Crie o gráfico de pizza com a paleta de cores em escala de cinza\n",
    "fig, ax = plt.subplots(figsize=(5, 5))\n",
    "ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=[gray_cmap(0.5), gray_cmap(0.8)], pctdistance=0.85)\n",
    "ax.axis('equal')  # Proporção igual garante que o gráfico seja desenhado como um círculo\n",
    "\n",
    "# Save the pie chart as a PNG file\n",
    "plt.savefig('grafico_pizza.png')\n",
    "\n",
    "# Create the second pie chart\n",
    "fig, ax = plt.subplots(figsize=(5, 5))\n",
    "ax.pie(sizes_v_atual, labels=labels_v_atual, autopct='%1.1f%%', startangle=90, colors=[gray_cmap(0.5), gray_cmap(0.8)], pctdistance=0.85)\n",
    "ax.axis('equal')  # Equal aspect ratio ensures that the chart is drawn as a circle\n",
    "\n",
    "# Save the second pie chart as a PNG file\n",
    "plt.savefig('grafico_pizza_v_atual.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FII</th>\n",
       "      <th>Tipo de Fundo</th>\n",
       "      <th>Segmento</th>\n",
       "      <th>qtd</th>\n",
       "      <th>P.Entrada</th>\n",
       "      <th>Valor.Entrada</th>\n",
       "      <th>P.Atual</th>\n",
       "      <th>V.Atual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BCFF11</td>\n",
       "      <td>Fundo de fundos</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>85.0</td>\n",
       "      <td>R$8.89</td>\n",
       "      <td>R$755.65</td>\n",
       "      <td>R$8.26</td>\n",
       "      <td>R$702.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HSML11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Shoppings / Varejo</td>\n",
       "      <td>7.0</td>\n",
       "      <td>R$93.06</td>\n",
       "      <td>R$651.42</td>\n",
       "      <td>R$95.36</td>\n",
       "      <td>R$667.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RECR11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>14.0</td>\n",
       "      <td>R$88.48</td>\n",
       "      <td>R$1238.68</td>\n",
       "      <td>R$84.99</td>\n",
       "      <td>R$1189.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VISC11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Shoppings / Varejo</td>\n",
       "      <td>4.0</td>\n",
       "      <td>R$116.64</td>\n",
       "      <td>R$466.56</td>\n",
       "      <td>R$112.95</td>\n",
       "      <td>R$451.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RBRR11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>2.0</td>\n",
       "      <td>R$90.9</td>\n",
       "      <td>R$181.8</td>\n",
       "      <td>R$90.96</td>\n",
       "      <td>R$181.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>BRCO11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Logístico / Indústria / Galpões</td>\n",
       "      <td>5.0</td>\n",
       "      <td>R$121.86</td>\n",
       "      <td>R$609.3</td>\n",
       "      <td>R$116.91</td>\n",
       "      <td>R$584.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>VGIP11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>5.0</td>\n",
       "      <td>R$91.49</td>\n",
       "      <td>R$457.45</td>\n",
       "      <td>R$88.53</td>\n",
       "      <td>R$442.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CVBI11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R$84.19</td>\n",
       "      <td>R$841.9</td>\n",
       "      <td>R$93.5</td>\n",
       "      <td>R$935.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>MALL11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Shoppings / Varejo</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R$117.17</td>\n",
       "      <td>R$117.17</td>\n",
       "      <td>R$108.27</td>\n",
       "      <td>R$108.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>VILG11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Logístico / Indústria / Galpões</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R$102.92</td>\n",
       "      <td>R$102.92</td>\n",
       "      <td>R$88.96</td>\n",
       "      <td>R$88.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>KNCR11</td>\n",
       "      <td>Fundo de papel</td>\n",
       "      <td>Títulos e Valores Mobiliários</td>\n",
       "      <td>6.0</td>\n",
       "      <td>R$100.53</td>\n",
       "      <td>R$603.18</td>\n",
       "      <td>R$104.16</td>\n",
       "      <td>R$624.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>XPLG11</td>\n",
       "      <td>Fundo de Tijolo</td>\n",
       "      <td>Logístico / Indústria / Galpões</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R$112.98</td>\n",
       "      <td>R$112.98</td>\n",
       "      <td>R$103.6</td>\n",
       "      <td>R$103.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       FII    Tipo de Fundo                         Segmento   qtd P.Entrada  \\\n",
       "0   BCFF11  Fundo de fundos    Títulos e Valores Mobiliários  85.0    R$8.89   \n",
       "1   HSML11  Fundo de Tijolo               Shoppings / Varejo   7.0   R$93.06   \n",
       "2   RECR11   Fundo de papel    Títulos e Valores Mobiliários  14.0   R$88.48   \n",
       "3   VISC11  Fundo de Tijolo               Shoppings / Varejo   4.0  R$116.64   \n",
       "4   RBRR11   Fundo de papel    Títulos e Valores Mobiliários   2.0    R$90.9   \n",
       "5   BRCO11  Fundo de Tijolo  Logístico / Indústria / Galpões   5.0  R$121.86   \n",
       "6   VGIP11   Fundo de papel    Títulos e Valores Mobiliários   5.0   R$91.49   \n",
       "7   CVBI11   Fundo de papel    Títulos e Valores Mobiliários  10.0   R$84.19   \n",
       "8   MALL11  Fundo de Tijolo               Shoppings / Varejo   1.0  R$117.17   \n",
       "9   VILG11  Fundo de Tijolo  Logístico / Indústria / Galpões   1.0  R$102.92   \n",
       "10  KNCR11   Fundo de papel    Títulos e Valores Mobiliários   6.0  R$100.53   \n",
       "11  XPLG11  Fundo de Tijolo  Logístico / Indústria / Galpões   1.0  R$112.98   \n",
       "\n",
       "   Valor.Entrada   P.Atual    V.Atual  \n",
       "0       R$755.65    R$8.26    R$702.1  \n",
       "1       R$651.42   R$95.36   R$667.52  \n",
       "2      R$1238.68   R$84.99  R$1189.86  \n",
       "3       R$466.56  R$112.95    R$451.8  \n",
       "4        R$181.8   R$90.96   R$181.92  \n",
       "5        R$609.3  R$116.91   R$584.55  \n",
       "6       R$457.45   R$88.53   R$442.65  \n",
       "7        R$841.9    R$93.5    R$935.0  \n",
       "8       R$117.17  R$108.27   R$108.27  \n",
       "9       R$102.92   R$88.96    R$88.96  \n",
       "10      R$603.18  R$104.16   R$624.96  \n",
       "11      R$112.98   R$103.6    R$103.6  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Acrescentar R$ ao Valores da tabela\n",
    "df.loc[:, 'P.Entrada'] = 'R$' + df['P.Entrada'].astype(str)\n",
    "df.loc[:, 'Valor.Entrada'] = 'R$' + df['Valor.Entrada'].astype(str)\n",
    "df.loc[:, 'P.Atual'] = 'R$' + df['P.Atual'].astype(str)\n",
    "df.loc[:, 'V.Atual'] = 'R$' + df['V.Atual'].astype(str)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Tabela de Dividend Yield"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FII</th>\n",
       "      <th>qtd</th>\n",
       "      <th>ÚLTIMO RENDIMENTO</th>\n",
       "      <th>DY P/ FII</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BCFF11</td>\n",
       "      <td>85.0</td>\n",
       "      <td>R$0.07</td>\n",
       "      <td>R$5.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HSML11</td>\n",
       "      <td>7.0</td>\n",
       "      <td>R$0.8</td>\n",
       "      <td>R$5.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RECR11</td>\n",
       "      <td>14.0</td>\n",
       "      <td>R$0.85</td>\n",
       "      <td>R$11.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>VISC11</td>\n",
       "      <td>4.0</td>\n",
       "      <td>R$0.85</td>\n",
       "      <td>R$3.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RBRR11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>R$0.85</td>\n",
       "      <td>R$1.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>BRCO11</td>\n",
       "      <td>5.0</td>\n",
       "      <td>R$0.87</td>\n",
       "      <td>R$4.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>VGIP11</td>\n",
       "      <td>5.0</td>\n",
       "      <td>R$0.88</td>\n",
       "      <td>R$4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CVBI11</td>\n",
       "      <td>10.0</td>\n",
       "      <td>R$0.97</td>\n",
       "      <td>R$9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>MALL11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R$0.8</td>\n",
       "      <td>R$0.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>VILG11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R$0.65</td>\n",
       "      <td>R$0.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>KNCR11</td>\n",
       "      <td>6.0</td>\n",
       "      <td>R$0.95</td>\n",
       "      <td>R$5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>XPLG11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>R$0.78</td>\n",
       "      <td>R$0.78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       FII   qtd ÚLTIMO RENDIMENTO DY P/ FII\n",
       "0   BCFF11  85.0            R$0.07    R$5.95\n",
       "1   HSML11   7.0             R$0.8     R$5.6\n",
       "2   RECR11  14.0            R$0.85    R$11.9\n",
       "3   VISC11   4.0            R$0.85     R$3.4\n",
       "4   RBRR11   2.0            R$0.85     R$1.7\n",
       "5   BRCO11   5.0            R$0.87    R$4.35\n",
       "6   VGIP11   5.0            R$0.88     R$4.4\n",
       "7   CVBI11  10.0            R$0.97     R$9.7\n",
       "8   MALL11   1.0             R$0.8     R$0.8\n",
       "9   VILG11   1.0            R$0.65    R$0.65\n",
       "10  KNCR11   6.0            R$0.95     R$5.7\n",
       "11  XPLG11   1.0            R$0.78    R$0.78"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Selecionar somente as colunas:'FII' e 'ÚLTIMO RENDIMENTO'\n",
    "df_DY = df\n",
    "cols = ['FII', 'qtd']\n",
    "df_DY = df_DY[cols]\n",
    "\n",
    "# Reordenar as colunas colocando 'FII' na primeira posição e selecionar somente as colunas:'FII', 'ÚLTIMO RENDIMENTO'\n",
    "cols = ['FII', 'ÚLTIMO RENDIMENTO']\n",
    "fii_data = fii_data[cols]\n",
    "\n",
    "#Juntar os dois dataframes\n",
    "DY = pd.merge(df_DY, fii_data, on='FII')\n",
    "\n",
    "# Remove o símbolo \"R$\" e converte para float\n",
    "DY['ÚLTIMO RENDIMENTO'] = DY['ÚLTIMO RENDIMENTO'].str.replace('R$ ', '').str.replace(',', '.').astype(float)\n",
    "# Criar uma nova coluna com o valor total de cada rendimento mensal de FII\n",
    "DY['DY P/ FII'] = DY['qtd']*DY['ÚLTIMO RENDIMENTO'] \n",
    "\n",
    "#Calcular o somatorio dos DY\n",
    "X = DY['DY P/ FII'].sum()\n",
    "\n",
    "# Formatando a tabela para retornar 2 casas decimais\n",
    "DY['DY P/ FII'] = DY['DY P/ FII'].round(2)\n",
    "DY['ÚLTIMO RENDIMENTO'] = 'R$' + DY['ÚLTIMO RENDIMENTO'].astype(str)\n",
    "DY['DY P/ FII'] = 'R$' + DY['DY P/ FII'].astype(str)\n",
    "\n",
    "DY"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Criar Tabela para Somatório dos Valores Entrada, Valor Atual e DY Mensal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>valor Entrada</th>\n",
       "      <th>Valor Atual</th>\n",
       "      <th>DY Mensal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>R$6139.01</td>\n",
       "      <td>R$6081.19</td>\n",
       "      <td>R$54.93</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  valor Entrada Valor Atual DY Mensal\n",
       "0     R$6139.01   R$6081.19   R$54.93"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rend_Carteria = pd.DataFrame({\"valor Entrada\":[valor_Entrada], \"Valor Atual\":[valor_Atual], \"DY Mensal\":[X]})\n",
    "Rend_Carteria['valor Entrada'] = 'R$' + Rend_Carteria['valor Entrada'].round(2).astype(str)\n",
    "Rend_Carteria['Valor Atual'] = 'R$' + Rend_Carteria['Valor Atual'].round(2).astype(str)\n",
    "Rend_Carteria['DY Mensal'] = 'R$' + Rend_Carteria['DY Mensal'].round(2).astype(str)\n",
    "Rend_Carteria"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Atualização de Carteira Semanal\n",
    "Criar relatorio em PDF da atualização da carteira de FII "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Arquivo PDF criado com sucesso!\n",
      "18/08/2024\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "# Create a PDF file including both the table data and the pie chart\n",
    "output_pdf = \"Carteira_fii.pdf\"\n",
    "\n",
    "c = canvas.Canvas(output_pdf, pagesize=letter)\n",
    "width, height = letter\n",
    "\n",
    "# Obtendo a data atual\n",
    "data_atual = datetime.now().strftime(\"%d/%m/%Y\")\n",
    "\n",
    "# Posição da data (acima e à esquerda)\n",
    "c.drawString(30, height - 30, data_atual)\n",
    "\n",
    "# Add the document title\n",
    "c.drawCentredString(width / 2, height - 40, \"Carteira de Fundos Imobiliários\")\n",
    "\n",
    "# Add table data\n",
    "#c.drawString(100, height - 100, fii_data1)\n",
    "\n",
    "# Add another section title\n",
    "#c.drawCentredString(width / 2, height - 330, \"Carteira de FII\")\n",
    "\n",
    "# Add another piece of information\n",
    "#c.drawString(100, height - 160, fii_tipo_de_fundo1)\n",
    "\n",
    "# Ajustando a posição do t para criar um espaço entre as tabelas\n",
    "t2 = Table([df.columns.tolist()] + df.values.tolist())\n",
    "t2.setStyle(TableStyle([\n",
    "    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n",
    "    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n",
    "    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n",
    "    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n",
    "    ('FONTSIZE', (0, 0), (-1, 0), 12),\n",
    "    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n",
    "    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n",
    "    ('GRID', (0, 0), (-1, -1), 1, colors.black),\n",
    "]))\n",
    "table_width2, table_height2 = t2.wrapOn(c, width, height)\n",
    "t2.drawOn(c, (width - table_width2) / 2, height - 50 - table_height2)  # Ajustar espaçamento para caber napágina \n",
    "#e espaço de 3cm entre tabelas\n",
    "\n",
    "# tabela DY\n",
    "# Ajustando a posição do t para criar um espaço entre as tabelas\n",
    "t3 = Table([DY.columns.tolist()] + DY.values.tolist())\n",
    "t3.setStyle(TableStyle([\n",
    "    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n",
    "    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n",
    "    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n",
    "    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n",
    "    ('FONTSIZE', (0, 0), (-1, 0), 12),\n",
    "    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n",
    "    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n",
    "    ('GRID', (0, 0), (-1, -1), 1, colors.black),\n",
    "]))\n",
    "\n",
    "\n",
    "# Definindo a margem à esquerda\n",
    "margem_esquerda = 30  # Você pode alterar esse valor para ajustar a distância da margem esquerda\n",
    "\n",
    "# Cálculo das dimensões e posicionamento da tabela\n",
    "table_width3, table_height3 = t3.wrapOn(c, width, height)\n",
    "\n",
    "# Posicionando a tabela com base na margem esquerda\n",
    "t3.drawOn(c, margem_esquerda, height - 540 - table_height3)\n",
    "\n",
    "# tabela DY_Mensal \n",
    "# Ajustando a posição do t para criar um espaço entre as tabelas\n",
    "t4 = Table([Rend_Carteria.columns.tolist()] + Rend_Carteria.values.tolist())\n",
    "t4.setStyle(TableStyle([\n",
    "    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n",
    "    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n",
    "    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n",
    "    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n",
    "    ('FONTSIZE', (0, 0), (-1, 0), 12),\n",
    "    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n",
    "    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n",
    "    ('GRID', (0, 0), (-1, -1), 1, colors.black),\n",
    "]))\n",
    "\n",
    "\n",
    "# Definindo a margem à esquerda\n",
    "margem_direita = 350  # Você pode alterar esse valor para ajustar a distância da margem esquerda\n",
    "\n",
    "# Cálculo das dimensões e posicionamento da tabela\n",
    "table_width4, table_height4 = t4.wrapOn(c, width, height)\n",
    "\n",
    "# Posicionando a tabela com base na margem esquerda\n",
    "t4.drawOn(c, margem_direita, height - 540 - table_height3)\n",
    "\n",
    "# Título acima do grafico grafico_pizza.png\n",
    "c.drawString((width / 2) - 165, height - 25 - table_height2 - table_height2, \"Peso Entrada\") \n",
    "\n",
    "c.drawImage('grafico_pizza.png', (width / 4) - 80, height - 15 - table_height2 - table_height2, width=200, \n",
    "            height=200)  # Ajustar os gráficos abaixo da tabela fii_tipo_de_fundo\n",
    "\n",
    "# Título acima do grafico grafico_pizza_v_atual.png\n",
    "c.drawString((3 * width / 4) - 5, height - 25 - table_height2 - table_height2, \"Peso Atual\")  \n",
    "\n",
    "c.drawImage('grafico_pizza_v_atual.png', (3*width / 4) - 80, height - 15 - table_height2 - table_height2, \n",
    "            width=200, height=200)  # Ajustar os gráficos abaixo da tabela fii_tipo_de_fundo\n",
    "\n",
    "# Save the PDF\n",
    "c.showPage()\n",
    "c.save()\n",
    "\n",
    "print(\"Arquivo PDF criado com sucesso!\")\n",
    "print(data_atual)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enviar E-Mail\n",
    "- Email cadastrado para envio automático do Relatório da carteira de FII"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E-mail enviado com sucesso!\n"
     ]
    }
   ],
   "source": [
    "import smtplib\n",
    "from email.mime.multipart import MIMEMultipart\n",
    "from email.mime.text import MIMEText\n",
    "from email.mime.base import MIMEBase\n",
    "from email import encoders\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "from dotenv import load_dotenv\n",
    "import os\n",
    "\n",
    "output_pdf = \"Carteira_fii.pdf\"\n",
    "\n",
    "# Configurar as credenciais de e-mail\n",
    "remetente = \"Meu_Email@hotmail.com\"\n",
    "senha = os.getenv(\"EMAIL_SENHA\")  # Acessa a senha armazenada na variável de ambiente\n",
    "destinatario = \"Destinatário@hotmail.com\"\n",
    "\n",
    "# 3. Configurando o e-mail\n",
    "mensagem = MIMEMultipart()\n",
    "mensagem['From'] = remetente\n",
    "mensagem['To'] = destinatario\n",
    "mensagem['Subject'] = \"Cartira de FII Atualizada\"\n",
    "\n",
    "# Corpo do e-mail\n",
    "corpo = \"Cartira de FII Atualizada\"\n",
    "mensagem.attach(MIMEText(corpo, 'plain'))\n",
    "\n",
    "# 4. Anexando o PDF ao e-mail\n",
    "with open(output_pdf, \"rb\") as anexo:\n",
    "    mime_base = MIMEBase('application', 'octet-stream')\n",
    "    mime_base.set_payload(anexo.read())\n",
    "    encoders.encode_base64(mime_base)\n",
    "    mime_base.add_header('Content-Disposition', f'attachment; filename={os.path.basename(output_pdf)}')\n",
    "    mensagem.attach(mime_base)\n",
    "\n",
    "# 5. Enviando o e-mail\n",
    "try:\n",
    "    servidor = smtplib.SMTP('smtp.office365.com', 587)  # Servidor SMTP para Hotmail/Outlook\n",
    "    servidor.starttls()\n",
    "    servidor.login(remetente, senha)\n",
    "    texto = mensagem.as_string()\n",
    "    servidor.sendmail(remetente, destinatario, texto)\n",
    "    servidor.quit()\n",
    "    print(\"E-mail enviado com sucesso!\")\n",
    "except Exception as e:\n",
    "    print(f\"Erro ao enviar e-mail: {e}\")\n",
    "\n",
    "\n",
    "# Opcional: Excluir o PDF após envio\n",
    "os.remove(output_pdf)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
